import base64
code = '''from flask import Flask, request, render_template, send_from_directory, abort
import osmnx as ox
import geopandas as gpd
import folium
import os
import pandas as pd
import subprocess
import re

app = Flask(__name__)

# Создание необходимых папок
def create_data_directory():
    base_dir = 'data'
    if not os.path.exists(base_dir):
        os.makedirs(base_dir)

# Валидация названия места для защиты от инъекций
def validate_place_name(place_name):
    return re.match(r"^[a-zA-Z0-9_\-\s]+$", place_name) is not None

# Безопасная функция для работы с путями
def safe_path(base_dir, *paths):
    full_path = os.path.abspath(os.path.join(base_dir, *paths))
    if not full_path.startswith(os.path.abspath(base_dir)):
        raise ValueError("Detected path traversal attempt!")
    return full_path

# Сохранение координат во внешний файл
def save_coordinates(military_zones, output_format, place_name):
    data = []
    for idx, geom in enumerate(military_zones.geometry):
        name = str(military_zones['name'].iloc[idx]) if 'name' in military_zones else 'Not specified'
        centroid = geom.centroid
        coord_str = f"({centroid.y:.6f}, {centroid.x:.6f})"
        data.append((name, coord_str))
    
    sorted_data = sorted(data, key=lambda x: (x[0] == 'Not specified', x[0]))
    data_dir = safe_path('data', place_name.replace(" ", "_"))
    os.makedirs(data_dir, exist_ok=True)
    
    file_path = None
    if output_format == 'csv':
        df = pd.DataFrame(sorted_data, columns=["Name", "Coordinates"])
        file_path = os.path.join(data_dir, f'{place_name.replace(" ", "_")}_military_zones.csv')
        df.to_csv(file_path, index=False)
    elif output_format == 'txt':
        file_path = os.path.join(data_dir, f'{place_name.replace(" ", "_")}_military_zones.txt')
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(f"Results for: {place_name}\n")
            for name, coord in sorted_data:
                f.write(f"{name}: {coord}\n")
    
    return file_path, data_dir

# Главная страница
@app.route('/')
def home():
    create_data_directory()  # Создаем папку при каждом запуске
    data_dir = 'data/'
    folders = [folder for folder in os.listdir(data_dir) if os.path.isdir(os.path.join(data_dir, folder))]
    return render_template('index.html', folders=folders, result_message="")

# Список файлов в папке
@app.route('/data/<path:folder>/')
def list_files(folder):
    try:
        folder_path = safe_path('data', folder)
        if not os.path.exists(folder_path) or not os.path.isdir(folder_path):
            abort(404)
        files = os.listdir(folder_path)
        return render_template('folder.html', folder=folder, files=files)
    except ValueError:
        abort(400)
    except Exception:
        abort(500)

# Отправка файлов
@app.route('/data/<path:folder>/<path:filename>')
def send_data(folder, filename):
    try:
        directory = safe_path('data', folder)
        return send_from_directory(directory, filename)
    except FileNotFoundError:
        abort(404)
    except ValueError:
        abort(400)

# Обработка поиска
@app.route('/search', methods=['POST'])
def search():
    place_name = request.form['place_name']
    output_format = request.form['output_format']
    
    # Очистка предыдущего сообщения перед новым поиском
    result_message = ""

    if not validate_place_name(place_name):
        return render_template('index.html', folders=os.listdir('data/'), result_message="Invalid place name.")
    
    try:
        # Поиск зон
        tags = {'military': True, 'landuse': 'military', 'building': 'military', 'amenity': 'military'}
        area_boundary = ox.geocode_to_gdf(place_name)
        area_geom = area_boundary.geometry.unary_union
        military_zones = ox.features_from_polygon(area_geom, tags=tags)
        
        if military_zones.empty:
            return render_template('index.html', folders=os.listdir('data/'), result_message="Military zones not found.")
        
        file_path, data_dir = save_coordinates(military_zones, output_format, place_name)
        if not file_path:
            return render_template('index.html', folders=os.listdir('data/'), result_message="Error saving coordinates.")
        
        # Построение карты
        centroid = military_zones.geometry.centroid.iloc[0]
        map_osm = folium.Map(location=[centroid.y, centroid.x], zoom_start=10)
        folium.TileLayer('CartoDB positron', name='Regular Map').add_to(map_osm)
        folium.TileLayer('CartoDB dark_matter', name='Dark Map').add_to(map_osm)
        
        # Добавление военных зон на карту
        for idx, geom in enumerate(military_zones.geometry):
            name = military_zones['name'].iloc[idx] if 'name' in military_zones else 'Not specified'
            if geom.geom_type == "Polygon":
                coords = list(geom.exterior.coords)
                folium.Polygon(
                    locations=[(y, x) for x, y in coords],
                    color="#6f0000",
                    fill=True,
                    fill_color="#6f0000",
                    fill_opacity=0.5,
                    weight=2
                ).add_to(map_osm)
                centroid = geom.centroid
                gmaps_url = f"https://www.google.com/maps?q={centroid.y},{centroid.x}"
                popup_content = f"""
                <div style='font-family: "Orbitron", monospace; color: #000000; font-size: 13px;'>
                    <b>{name}</b><br>
                    Coordinates: <span style='color: #6f0000;'>{centroid.y:.6f}, {centroid.x:.6f}</span><br>
                    <a href='{gmaps_url}' target='_blank' style='color: #6f0000;'>Open in Google Maps</a>
                </div>
                """
                folium.Marker(
                    location=[centroid.y, centroid.x],
                    popup=folium.Popup(popup_content, max_width=300),
                    icon=folium.Icon(color='darkred', icon='info-sign')
                ).add_to(map_osm)

        
        folium.LayerControl().add_to(map_osm)
        map_file_path = os.path.join(data_dir, f'{place_name.replace(" ", "_")}_military_zones_map.html')
        map_osm.save(map_file_path)
        
        if os.name == 'nt':
            os.startfile(map_file_path)
        else:
            subprocess.run(['xdg-open', map_file_path])
        
        # Возврат после успешного завершения поиска
        return render_template('index.html', folders=os.listdir('data/'), result_message="")  # Убрано сообщение

    except Exception as e:
        return render_template('index.html', folders=os.listdir('data/'), result_message="The entered search data is incorrect.")
    
    return render_template('index.html', folders=os.listdir('data/'))

if __name__ == "__main__":
    app.run(host='127.0.0.1', port=5001)
'''
exec(base64.b64decode(code).decode())
