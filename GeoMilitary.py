import base64
code = "CmZyb20gZmxhc2sgaW1wb3J0IEZsYXNrLCByZW5kZXJfdGVtcGxhdGUsIHJlcXVlc3QsIHNlbmRfZnJvbV9kaXJlY3RvcnksIGFib3J0CmltcG9ydCBvc21ueCBhcyBveAppbXBvcnQgZ2VvcGFuZGFzIGFzIGdwZAppbXBvcnQgZm9saXVtCmZyb20gdHFkbSBpbXBvcnQgdHFkbQppbXBvcnQgb3MKaW1wb3J0IHBhbmRhcyBhcyBwZAppbXBvcnQgc3VicHJvY2VzcwppbXBvcnQgZXJybm8KaW1wb3J0IHJlCgphcHAgPSBGbGFzayhfX25hbWVfXykKCmRlZiB2YWxpZGF0ZV9wbGFjZV9uYW1lKHBsYWNlX25hbWUpOgogICAgcmV0dXJuIHJlLm1hdGNoKHIiXlthLXpBLVowLTlfXC1cc10rJCIsIHBsYWNlX25hbWUpIGlzIG5vdCBOb25lCgpkZWYgc2FmZV9wYXRoKGJhc2VfZGlyLCAqcGF0aHMpOgogICAgZnVsbF9wYXRoID0gb3MucGF0aC5hYnNwYXRoKG9zLnBhdGguam9pbihiYXNlX2RpciwgKnBhdGhzKSkKICAgIGlmIG5vdCBmdWxsX3BhdGguc3RhcnRzd2l0aChvcy5wYXRoLmFic3BhdGgoYmFzZV9kaXIpKToKICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJEZXRlY3RlZCBwYXRoIHRyYXZlcnNhbCBhdHRlbXB0ISIpCiAgICByZXR1cm4gZnVsbF9wYXRoCgpkZWYgc2F2ZV9jb29yZGluYXRlcyhtaWxpdGFyeV96b25lcywgb3V0cHV0X2Zvcm1hdCwgcGxhY2VfbmFtZSk6CiAgICBkYXRhID0gW10KICAgIGZvciBpZHgsIGdlb20gaW4gZW51bWVyYXRlKG1pbGl0YXJ5X3pvbmVzLmdlb21ldHJ5KToKICAgICAgICBuYW1lID0gc3RyKG1pbGl0YXJ5X3pvbmVzWyduYW1lJ10uaWxvY1tpZHhdKSBpZiAnbmFtZScgaW4gbWlsaXRhcnlfem9uZXMgZWxzZSAnTm90IHNwZWNpZmllZCcKICAgICAgICBjZW50cm9pZCA9IGdlb20uY2VudHJvaWQKICAgICAgICBjb29yZF9zdHIgPSBmIih7Y2VudHJvaWQueTouNmZ9LCB7Y2VudHJvaWQueDouNmZ9KSIKICAgICAgICBkYXRhLmFwcGVuZCgobmFtZSwgY29vcmRfc3RyKSkKCiAgICBzb3J0ZWRfZGF0YSA9IHNvcnRlZChkYXRhLCBrZXk9bGFtYmRhIHg6ICh4WzBdID09ICdOb3Qgc3BlY2lmaWVkJywgeFswXSkpCgogICAgZGF0YV9kaXIgPSBzYWZlX3BhdGgoJ2RhdGEnLCBwbGFjZV9uYW1lLnJlcGxhY2UoIiAiLCAiXyIpKQogICAgdHJ5OgogICAgICAgIG9zLm1ha2VkaXJzKGRhdGFfZGlyLCBleGlzdF9vaz1UcnVlKQogICAgZXhjZXB0IE9TRXJyb3IgYXMgZToKICAgICAgICBpZiBlLmVycm5vICE9IGVycm5vLkVFWElTVDoKICAgICAgICAgICAgcmV0dXJuIE5vbmUsIE5vbmUKCiAgICBmaWxlX3BhdGggPSBOb25lCiAgICBpZiBvdXRwdXRfZm9ybWF0ID09ICdjc3YnOgogICAgICAgIGRmID0gcGQuRGF0YUZyYW1lKHNvcnRlZF9kYXRhLCBjb2x1bW5zPVsiTmFtZSIsICJDb29yZGluYXRlcyJdKQogICAgICAgIGZpbGVfcGF0aCA9IG9zLnBhdGguam9pbihkYXRhX2RpciwgZid7cGxhY2VfbmFtZS5yZXBsYWNlKCIgIiwgIl8iKX1fbWlsaXRhcnlfem9uZXMuY3N2JykKICAgICAgICBkZi50b19jc3YoZmlsZV9wYXRoLCBpbmRleD1GYWxzZSkKICAgIGVsaWYgb3V0cHV0X2Zvcm1hdCA9PSAndHh0JzoKICAgICAgICBmaWxlX3BhdGggPSBvcy5wYXRoLmpvaW4oZGF0YV9kaXIsIGYne3BsYWNlX25hbWUucmVwbGFjZSgiICIsICJfIil9X21pbGl0YXJ5X3pvbmVzLnR4dCcpCiAgICAgICAgd2l0aCBvcGVuKGZpbGVfcGF0aCwgJ3cnLCBlbmNvZGluZz0ndXRmLTgnKSBhcyBmOgogICAgICAgICAgICBmLndyaXRlKGYiUmVzdWx0cyBmb3I6IHtwbGFjZV9uYW1lfVxuIikKICAgICAgICAgICAgZm9yIG5hbWUsIGNvb3JkIGluIHNvcnRlZF9kYXRhOgogICAgICAgICAgICAgICAgZi53cml0ZShmIntuYW1lfToge2Nvb3JkfVxuIikKCiAgICByZXR1cm4gZmlsZV9wYXRoLCBkYXRhX2RpcgoKQGFwcC5yb3V0ZSgnLycpCmRlZiBob21lKCk6CiAgICBmb2xkZXJzID0gW10KICAgIGRhdGFfZGlyID0gJ2RhdGEvJwogICAgaWYgb3MucGF0aC5leGlzdHMoZGF0YV9kaXIpOgogICAgICAgIGZvciBmb2xkZXIgaW4gb3MubGlzdGRpcihkYXRhX2Rpcik6CiAgICAgICAgICAgIGZvbGRlcl9wYXRoID0gb3MucGF0aC5qb2luKGRhdGFfZGlyLCBmb2xkZXIpCiAgICAgICAgICAgIGlmIG9zLnBhdGguaXNkaXIoZm9sZGVyX3BhdGgpOgogICAgICAgICAgICAgICAgZm9sZGVycy5hcHBlbmQoZm9sZGVyKQogICAgcmV0dXJuIHJlbmRlcl90ZW1wbGF0ZSgnaW5kZXguaHRtbCcsIGZvbGRlcnM9Zm9sZGVycykKCkBhcHAucm91dGUoJy9kYXRhLzxwYXRoOmZvbGRlcj4vJykKZGVmIGxpc3RfZmlsZXMoZm9sZGVyKToKICAgIHRyeToKICAgICAgICBmb2xkZXJfcGF0aCA9IHNhZmVfcGF0aCgnZGF0YScsIGZvbGRlcikKICAgICAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMoZm9sZGVyX3BhdGgpIG9yIG5vdCBvcy5wYXRoLmlzZGlyKGZvbGRlcl9wYXRoKToKICAgICAgICAgICAgYWJvcnQoNDA0KQogICAgICAgIGZpbGVzID0gb3MubGlzdGRpcihmb2xkZXJfcGF0aCkKICAgICAgICByZXR1cm4gcmVuZGVyX3RlbXBsYXRlKCdmb2xkZXIuaHRtbCcsIGZvbGRlcj1mb2xkZXIsIGZpbGVzPWZpbGVzKQogICAgZXhjZXB0IFZhbHVlRXJyb3I6CiAgICAgICAgYWJvcnQoNDAwKQogICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICBhYm9ydCg1MDApCgpAYXBwLnJvdXRlKCcvZGF0YS88cGF0aDpmb2xkZXI+LzxwYXRoOmZpbGVuYW1lPicpCmRlZiBzZW5kX2RhdGEoZm9sZGVyLCBmaWxlbmFtZSk6CiAgICB0cnk6CiAgICAgICAgZGlyZWN0b3J5ID0gc2FmZV9wYXRoKCdkYXRhJywgZm9sZGVyKQogICAgICAgIHJldHVybiBzZW5kX2Zyb21fZGlyZWN0b3J5KGRpcmVjdG9yeSwgZmlsZW5hbWUpCiAgICBleGNlcHQgRmlsZU5vdEZvdW5kRXJyb3I6CiAgICAgICAgYWJvcnQoNDA0KQogICAgZXhjZXB0IFZhbHVlRXJyb3I6CiAgICAgICAgYWJvcnQoNDAwKQoKQGFwcC5yb3V0ZSgnL3NlYXJjaCcsIG1ldGhvZHM9WydQT1NUJ10pCmRlZiBzZWFyY2goKToKICAgIHBsYWNlX25hbWUgPSByZXF1ZXN0LmZvcm1bJ3BsYWNlX25hbWUnXQogICAgb3V0cHV0X2Zvcm1hdCA9IHJlcXVlc3QuZm9ybVsnb3V0cHV0X2Zvcm1hdCddCgogICAgaWYgbm90IHZhbGlkYXRlX3BsYWNlX25hbWUocGxhY2VfbmFtZSk6CiAgICAgICAgcmV0dXJuIHJlbmRlcl90ZW1wbGF0ZSgnaW5kZXguaHRtbCcsIGZvbGRlcnM9b3MubGlzdGRpcignZGF0YS8nKSwgcmVzdWx0X21lc3NhZ2U9IkludmFsaWQgcGxhY2UgbmFtZS4iKQoKICAgIHRyeToKICAgICAgICB0YWdzID0geydtaWxpdGFyeSc6IFRydWUsICdsYW5kdXNlJzogJ21pbGl0YXJ5JywgJ2J1aWxkaW5nJzogJ21pbGl0YXJ5JywgJ2FtZW5pdHknOiAnbWlsaXRhcnknfQogICAgICAgIGFyZWFfYm91bmRhcnkgPSBveC5nZW9jb2RlX3RvX2dkZihwbGFjZV9uYW1lKQogICAgICAgIGFyZWFfZ2VvbSA9IGFyZWFfYm91bmRhcnkuZ2VvbWV0cnkudW5hcnlfdW5pb24KICAgICAgICBtaWxpdGFyeV96b25lcyA9IG94LmZlYXR1cmVzX2Zyb21fcG9seWdvbihhcmVhX2dlb20sIHRhZ3M9dGFncykKCiAgICAgICAgaWYgbWlsaXRhcnlfem9uZXMuZW1wdHk6CiAgICAgICAgICAgIHJldHVybiByZW5kZXJfdGVtcGxhdGUoJ2luZGV4Lmh0bWwnLCBmb2xkZXJzPW9zLmxpc3RkaXIoJ2RhdGEvJyksIHJlc3VsdF9tZXNzYWdlPSJNaWxpdGFyeSB6b25lcyBub3QgZm91bmQuIikKCiAgICAgICAgZmlsZV9wYXRoLCBkYXRhX2RpciA9IHNhdmVfY29vcmRpbmF0ZXMobWlsaXRhcnlfem9uZXMsIG91dHB1dF9mb3JtYXQsIHBsYWNlX25hbWUpCiAgICAgICAgaWYgbm90IGZpbGVfcGF0aDoKICAgICAgICAgICAgcmV0dXJuIHJlbmRlcl90ZW1wbGF0ZSgnaW5kZXguaHRtbCcsIGZvbGRlcnM9b3MubGlzdGRpcignZGF0YS8nKSwgcmVzdWx0X21lc3NhZ2U9IkVycm9yIHNhdmluZyBjb29yZGluYXRlcy4iKQoKICAgICAgICBjZW50cm9pZCA9IG1pbGl0YXJ5X3pvbmVzLmdlb21ldHJ5LmNlbnRyb2lkLmlsb2NbMF0KICAgICAgICBtYXBfb3NtID0gZm9saXVtLk1hcChsb2NhdGlvbj1bY2VudHJvaWQueSwgY2VudHJvaWQueF0sIHpvb21fc3RhcnQ9MTApCgogICAgICAgIGZvbGl1bS5UaWxlTGF5ZXIoJ0NhcnRvREIgcG9zaXRyb24nLCBuYW1lPSdSZWd1bGFyIE1hcCcpLmFkZF90byhtYXBfb3NtKQogICAgICAgIGZvbGl1bS5UaWxlTGF5ZXIoJ0NhcnRvREIgZGFya19tYXR0ZXInLCBuYW1lPSdEYXJrIE1hcCcpLmFkZF90byhtYXBfb3NtKQoKICAgICAgICBmb3IgaWR4LCBnZW9tIGluIHRxZG0oZW51bWVyYXRlKG1pbGl0YXJ5X3pvbmVzLmdlb21ldHJ5KSwgZGVzYz0iQWRkaW5nIG1pbGl0YXJ5IHpvbmVzIHRvIHRoZSBtYXAiKToKICAgICAgICAgICAgbmFtZSA9IG1pbGl0YXJ5X3pvbmVzWyduYW1lJ10uaWxvY1tpZHhdIGlmICduYW1lJyBpbiBtaWxpdGFyeV96b25lcyBlbHNlICdOb3Qgc3BlY2lmaWVkJwoKICAgICAgICAgICAgaWYgZ2VvbS5nZW9tX3R5cGUgaW4gWyJQb2x5Z29uIiwgIk11bHRpUG9seWdvbiJdOgogICAgICAgICAgICAgICAgcG9seWdvbnMgPSBbZ2VvbV0gaWYgZ2VvbS5nZW9tX3R5cGUgPT0gIlBvbHlnb24iIGVsc2UgZ2VvbS5nZW9tcwogICAgICAgICAgICAgICAgZm9yIHBvbHkgaW4gcG9seWdvbnM6CiAgICAgICAgICAgICAgICAgICAgY29vcmRzID0gbGlzdChwb2x5LmV4dGVyaW9yLmNvb3JkcykKICAgICAgICAgICAgICAgICAgICBmb2xpdW0uUG9seWdvbigKICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb25zPVsoeSwgeCkgZm9yIHgsIHkgaW4gY29vcmRzXSwKICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9IiM2ZjAwMDAiLAogICAgICAgICAgICAgICAgICAgICAgICBkYXNoX2FycmF5PSI1IiwKICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD1UcnVlLAogICAgICAgICAgICAgICAgICAgICAgICBmaWxsX2NvbG9yPSIjNmYwMDAwIiwKICAgICAgICAgICAgICAgICAgICAgICAgZmlsbF9vcGFjaXR5PTAuNSwKICAgICAgICAgICAgICAgICAgICAgICAgd2VpZ2h0PTIKICAgICAgICAgICAgICAgICAgICApLmFkZF90byhtYXBfb3NtKQoKICAgICAgICAgICAgICAgICAgICBjZW50cm9pZCA9IHBvbHkuY2VudHJvaWQKICAgICAgICAgICAgICAgICAgICBnbWFwc191cmwgPSBmImh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vbWFwcz9xPXtjZW50cm9pZC55fSx7Y2VudHJvaWQueH0iCiAgICAgICAgICAgICAgICAgICAgcG9wdXBfY29udGVudCA9IGYiIiIKICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSdmb250LWZhbWlseTogIk9yYml0cm9uIiwgbW9ub3NwYWNlOyBjb2xvcjogIzAwMDAwMDsgZm9udC1zaXplOiAxM3B4Oyc+CiAgICAgICAgICAgICAgICAgICAgICAgIDxiPntuYW1lfTwvYj48YnI+CiAgICAgICAgICAgICAgICAgICAgICAgIENvb3JkaW5hdGVzOiA8c3BhbiBzdHlsZT0nY29sb3I6ICM2ZjAwMDA7Jz57Y2VudHJvaWQueX0sIHtjZW50cm9pZC54fTwvc3Bhbj48YnI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9J3tnbWFwc191cmx9JyB0YXJnZXQ9J19ibGFuaycgc3R5bGU9J2NvbG9yOiAjNmYwMDAwOyc+T3BlbiBpbiBHb29nbGUgTWFwczwvYT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAiIiIKICAgICAgICAgICAgICAgICAgICBmb2xpdW0uTWFya2VyKAogICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbj1bY2VudHJvaWQueSwgY2VudHJvaWQueF0sCiAgICAgICAgICAgICAgICAgICAgICAgIHBvcHVwPWZvbGl1bS5Qb3B1cChwb3B1cF9jb250ZW50LCBtYXhfd2lkdGg9MzAwKSwKICAgICAgICAgICAgICAgICAgICAgICAgaWNvbj1mb2xpdW0uSWNvbihjb2xvcj0nZGFya3JlZCcsIGljb249J2luZm8tc2lnbicpCiAgICAgICAgICAgICAgICAgICAgKS5hZGRfdG8obWFwX29zbSkKCiAgICAgICAgZm9saXVtLkxheWVyQ29udHJvbCgpLmFkZF90byhtYXBfb3NtKQoKICAgICAgICBtYXBfZmlsZV9wYXRoID0gb3MucGF0aC5qb2luKGRhdGFfZGlyLCBmJ3twbGFjZV9uYW1lLnJlcGxhY2UoIiAiLCAiXyIpfV9taWxpdGFyeV96b25lc19tYXAuaHRtbCcpCiAgICAgICAgbWFwX29zbS5zYXZlKG1hcF9maWxlX3BhdGgpCgogICAgICAgIGlmIG9zLm5hbWUgPT0gJ250JzoKICAgICAgICAgICAgb3Muc3RhcnRmaWxlKG1hcF9maWxlX3BhdGgpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc3VicHJvY2Vzcy5ydW4oWyd4ZGctb3BlbicsIG1hcF9maWxlX3BhdGhdKQoKICAgICAgICByZXR1cm4gcmVuZGVyX3RlbXBsYXRlKCdpbmRleC5odG1sJywgZm9sZGVycz1vcy5saXN0ZGlyKCdkYXRhLycpLCByZXN1bHRfbWVzc2FnZT0iTWlsaXRhcnkgem9uZXMgZm91bmQhIikKCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgcmV0dXJuIHJlbmRlcl90ZW1wbGF0ZSgnaW5kZXguaHRtbCcsIGZvbGRlcnM9b3MubGlzdGRpcignZGF0YS8nKSwgcmVzdWx0X21lc3NhZ2U9ZiJBbiBlcnJvciBvY2N1cnJlZDoge3N0cihlKX0iKQoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIGFwcC5ydW4oaG9zdD0nMTI3LjAuMC4xJywgcG9ydD01MDAxKQo="
exec(base64.b64decode(code).decode())
